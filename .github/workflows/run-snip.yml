name: Run snip_to_pdf (CI demo)

# Manual trigger from the GitHub UI
on:
  workflow_dispatch:

jobs:
  test-ocr:
    # Windows runner – required for the Tesseract binary we install
    runs-on: windows-latest

    # --------------------------------------------------------------
    # 1️⃣ Work inside the folder that actually contains the code
    # --------------------------------------------------------------
    defaults:
      run:
        working-directory: ${{ github.workspace }}/my-job-scraper   # <‑‑ IMPORTANT

    steps:
      # --------------------------------------------------------------
      # 2️⃣ Checkout the repository (all files are now under the cwd)
      # --------------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # --------------------------------------------------------------
      # 3️⃣ Set up Python (choose the version you support)
      # --------------------------------------------------------------
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"   # or 3.11 / 3.10

      # --------------------------------------------------------------
      # 4️⃣ Install the Python dependencies (Bash step)
      # --------------------------------------------------------------
      - name: Install Python dependencies
        # Bash is needed for the `[ ! -f … ]` test
        shell: bash
        run: |
          # Fail fast if the file is missing – gives a clear error
          if [ ! -f requirements.txt ]; then
            echo "❌ requirements.txt not found in $PWD"
            exit 1
          fi
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # --------------------------------------------------------------
      # 5️⃣ Install Tesseract OCR (Windows binary via Chocolatey)
      # --------------------------------------------------------------
      - name: Install Tesseract OCR
        # This step runs in PowerShell (default on Windows runners)
        run: |
          # 5.1 – Install via Chocolatey
          choco install tesseract -y --no-progress

          # 5.2 – Refresh the environment so the new PATH entry is visible
          #      `refreshenv` is a helper script that comes with Chocolatey.
          #      If for any reason it is not found, we manually prepend the path.
          if (Get-Command refreshenv -ErrorAction SilentlyContinue) {
            refreshenv
          } else {
            $tessPath = "C:\Program Files\Tesseract-OCR"
            if (Test-Path $tessPath) {
              $env:PATH = "$tessPath;$env:PATH"
            }
          }

          # 5.3 – Verify the installation
          tesseract --version

      # --------------------------------------------------------------
      # 6️⃣ Run a quick OCR sanity‑check (non‑interactive)
      # --------------------------------------------------------------
      - name: Run OCR sanity check
        run: |
          python - <<'PYCODE'
          import sys
          from pathlib import Path
          from PIL import Image, ImageDraw
          import pytesseract

          # Create a tiny image with known text
          txt = "Hello CI"
          img = Image.new("RGB", (200, 60), color="white")
          d = ImageDraw.Draw(img)
          d.text((10, 10), txt, fill="black")
          img_path = Path("sample.png")
          img.save(img_path)

          # Run OCR
          result = pytesseract.image_to_string(img_path, lang="eng")
          print("OCR RESULT:", result.strip())

          if "Hello" not in result:
              sys.exit("❌ OCR did NOT recognise the expected text.")
          else:
              print("✅ OCR recognised the text correctly.")
          PYCODE

      # --------------------------------------------------------------
      # 7️⃣ (Optional) Run the full script in a head‑less mode
      # --------------------------------------------------------------
      - name: Run snip_to_pdf with a dummy image (headless)
        run: |
          python - <<'PYCODE'
          from pathlib import Path
          from src.pdf_builder import text_to_pdf

          dummy_text = "Sample job description fetched during CI."
          out_pdf = Path("dummy_job.pdf")
          text_to_pdf(dummy_text, out_pdf)
          print(f"✅ Dummy PDF created at {out_pdf.resolve()}")
          PYCODE
